{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 271, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Kamales/Downloads/Meeting%20boss/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/google-genai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,6KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 292, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Kamales/Downloads/Meeting%20boss/src/ai/flows/types.ts"],"sourcesContent":["import {z} from 'genkit';\n\nexport const BookingConfirmationInputSchema = z.object({\n  roomName: z.string().describe('The name of the meeting room that was booked.'),\n  startTime: z.string().describe('The start time of the booking in a readable format.'),\n  endTime: z.string().describe('The end time of the booking in a readable format.'),\n  bookingDate: z.string().describe('The date of the booking in a readable format.'),\n  meetingTitle: z.string().describe('The title of the meeting.'),\n  userName: z.string().describe('The name of the user who made the booking.'),\n});\nexport type BookingConfirmationInput = z.infer<typeof BookingConfirmationInputSchema>;\n\nexport const BookingConfirmationOutputSchema = z.object({\n  subject: z.string().describe('The subject line for the confirmation email.'),\n  body: z.string().describe('The HTML body of the confirmation email.'),\n});\nexport type BookingConfirmationOutput = z.infer<typeof BookingConfirmationOutputSchema>;\n"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEO,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC9B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IACjC,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAClC,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAChC;AAGO,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC7B,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5B","debugId":null}},
    {"offset": {"line": 317, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Kamales/Downloads/Meeting%20boss/src/ai/flows/send-booking-confirmation-flow.ts"],"sourcesContent":["'use server';\n/**\n * @fileOverview A flow to generate a booking confirmation email.\n *\n * - generateBookingConfirmationEmail - A function that generates the email content.\n */\n\nimport {ai} from '@/ai/genkit';\nimport { BookingConfirmationInputSchema, BookingConfirmationOutputSchema, type BookingConfirmationInput, type BookingConfirmationOutput } from './types';\n\n\nconst prompt = ai.definePrompt({\n  name: 'bookingConfirmationPrompt',\n  input: {schema: BookingConfirmationInputSchema},\n  output: {schema: BookingConfirmationOutputSchema},\n  prompt: `\n    You are an assistant for the \"Meeting Maestro\" application. Your task is to generate a professional and friendly meeting room booking confirmation email.\n\n    The user, {{{userName}}}, has just booked a room. Generate an email with a clear subject and a concise HTML body.\n\n    The email should include:\n    - A clear subject line like \"Booking Confirmed: [Meeting Title]\".\n    - A greeting to the user.\n    - Confirmation that their booking is complete.\n    - All the essential details: Meeting Title, Room Name, Date, and Time.\n    - A professional closing.\n\n    Here are the booking details:\n    - User Name: {{{userName}}}\n    - Meeting Title: {{{meetingTitle}}}\n    - Room: {{{roomName}}}\n    - Date: {{{bookingDate}}}\n    - Start Time: {{{startTime}}}\n    - End Time: {{{endTime}}}\n\n    Generate the email content based on these details. The body content must be valid HTML.\n  `,\n});\n\nconst sendBookingConfirmationFlow = ai.defineFlow(\n  {\n    name: 'sendBookingConfirmationFlow',\n    inputSchema: BookingConfirmationInputSchema,\n    outputSchema: BookingConfirmationOutputSchema,\n  },\n  async (input) => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n\nexport async function generateBookingConfirmationEmail(input: BookingConfirmationInput): Promise<BookingConfirmationOutput> {\n    return sendBookingConfirmationFlow(input);\n}\n"],"names":[],"mappings":";;;;;AACA;;;;CAIC,GAED;AACA;;;;;;AAGA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ,2HAAA,CAAA,iCAA8B;IAAA;IAC9C,QAAQ;QAAC,QAAQ,2HAAA,CAAA,kCAA+B;IAAA;IAChD,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;EAqBT,CAAC;AACH;AAEA,MAAM,8BAA8B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC/C;IACE,MAAM;IACN,aAAa,2HAAA,CAAA,iCAA8B;IAC3C,cAAc,2HAAA,CAAA,kCAA+B;AAC/C,GACA,OAAO;IACL,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;AAGK,eAAe,iCAAiC,KAA+B;IAClF,OAAO,4BAA4B;AACvC;;;IAFsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 386, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Kamales/Downloads/Meeting%20boss/src/services/email.ts"],"sourcesContent":["/*\n * @fileoverview This file contains the email service for the application.\n *\n * Since there is no real email provider integrated, this service simulates\n * sending an email by logging the details to the console. In a real-world\n * scenario, you would replace the console.log with a call to an email\n * service provider like SendGrid, Mailgun, or AWS SES.\n */\n\n'use server';\n\ninterface EmailOptions {\n  to: string;\n  from: string;\n  subject: string;\n  html: string;\n}\n\n/**\n * Sends an email.\n *\n * @param options The email options.\n * @returns A promise that resolves when the email is \"sent\".\n */\nexport async function sendEmail(options: EmailOptions): Promise<void> {\n  console.log('--- SIMULATING EMAIL SEND ---');\n  console.log(`To: ${options.to}`);\n  console.log(`From: ${options.from}`);\n  console.log(`Subject: ${options.subject}`);\n  console.log('--- HTML Body ---');\n  console.log(options.html);\n  console.log('---------------------------');\n  // In a real implementation, you would use a service like SendGrid, for example:\n  // await sgMail.send(options);\n  return Promise.resolve();\n}\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;;;AAiBM,eAAe,UAAU,OAAqB;IACnD,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAG,CAAC,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE;IAC/B,QAAQ,GAAG,CAAC,CAAC,MAAM,EAAE,QAAQ,IAAI,EAAE;IACnC,QAAQ,GAAG,CAAC,CAAC,SAAS,EAAE,QAAQ,OAAO,EAAE;IACzC,QAAQ,GAAG,CAAC;IACZ,QAAQ,GAAG,CAAC,QAAQ,IAAI;IACxB,QAAQ,GAAG,CAAC;IACZ,gFAAgF;IAChF,8BAA8B;IAC9B,OAAO,QAAQ,OAAO;AACxB;;;IAXsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 424, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Kamales/Downloads/Meeting%20boss/src/app/actions.ts"],"sourcesContent":["'use server';\n\nimport { generateBookingConfirmationEmail } from '@/ai/flows/send-booking-confirmation-flow';\nimport type { BookingConfirmationInput } from '@/ai/flows/types';\nimport { sendEmail } from '@/services/email';\n\nexport async function handleBookingConfirmation(userEmail: string, bookingDetails: BookingConfirmationInput) {\n    if (!userEmail) {\n        console.error(\"No user email provided for booking confirmation.\");\n        return;\n    }\n\n    try {\n        // 1. Generate the email content using the AI flow\n        const emailContent = await generateBookingConfirmationEmail(bookingDetails);\n\n        // 2. Send the email using the email service\n        await sendEmail({\n            to: userEmail,\n            from: 'kamales1123@gmail.com', // As specified\n            subject: emailContent.subject,\n            html: emailContent.body,\n        });\n\n        console.log(`Booking confirmation email generation and sending process initiated for ${userEmail}`);\n\n    } catch (error) {\n        console.error(\"Error handling booking confirmation:\", error);\n        // Optionally, you could add more robust error handling here,\n        // like logging to a dedicated service or retrying.\n    }\n}\n"],"names":[],"mappings":";;;;;AAEA;AAEA;;;;;;AAEO,eAAe,0BAA0B,SAAiB,EAAE,cAAwC;IACvG,IAAI,CAAC,WAAW;QACZ,QAAQ,KAAK,CAAC;QACd;IACJ;IAEA,IAAI;QACA,kDAAkD;QAClD,MAAM,eAAe,MAAM,CAAA,GAAA,6JAAA,CAAA,mCAAgC,AAAD,EAAE;QAE5D,4CAA4C;QAC5C,MAAM,CAAA,GAAA,wHAAA,CAAA,YAAS,AAAD,EAAE;YACZ,IAAI;YACJ,MAAM;YACN,SAAS,aAAa,OAAO;YAC7B,MAAM,aAAa,IAAI;QAC3B;QAEA,QAAQ,GAAG,CAAC,CAAC,wEAAwE,EAAE,WAAW;IAEtG,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,wCAAwC;IACtD,6DAA6D;IAC7D,mDAAmD;IACvD;AACJ;;;IAzBsB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 469, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Kamales/Downloads/Meeting%20boss/.next-internal/server/app/dashboard/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {handleBookingConfirmation as '6053fb332e743bfdbedc43c2dbab60fd76a1ce5055'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 527, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Kamales/Downloads/Meeting%20boss/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA8R,GAC3T,4DACA","debugId":null}},
    {"offset": {"line": 541, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Kamales/Downloads/Meeting%20boss/src/app/dashboard/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/dashboard/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/dashboard/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA0Q,GACvS,wCACA","debugId":null}},
    {"offset": {"line": 555, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}